{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/homeworks/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx\";\nimport React from 'react';\nimport s from './SuperInputText.module.css'; // тип пропсов обычного инпута\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SuperInputText = _ref => {\n  let {\n    onChange,\n    onChangeText,\n    onKeyPress,\n    onEnter,\n    error,\n    className,\n    spanClassName,\n    id,\n    ...restProps // все остальные пропсы попадут в объект restProps\n\n  } = _ref;\n\n  const onChangeCallback = e => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(e); // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(e.currentTarget.value);\n  };\n\n  const onKeyPressCallback = e => {\n    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(e);\n    onEnter && // если есть пропс onEnter\n    e.key === 'Enter' && // и если нажата кнопка Enter\n    onEnter(); // то вызвать его\n  };\n\n  const finalSpanClassName = s.error + (spanClassName ? ' ' + spanClassName : '');\n  const finalInputClassName = s.input + (error ? ' ' + s.errorInput : ' ' + s.superInput) + (className ? ' ' + s.className : ''); // задача на смешивание классов\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.inputWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      type: 'text',\n      onChange: onChangeCallback,\n      onKeyPress: onKeyPressCallback,\n      className: finalInputClassName,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: id ? id + '-span' : undefined,\n      className: finalSpanClassName,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SuperInputText;\nexport default SuperInputText;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuperInputText\");","map":{"version":3,"names":["React","s","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","id","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","input","errorInput","superInput","inputWrapper","undefined"],"sources":["/Users/eduardanaida/Documents/GitHub/homeworks/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx"],"sourcesContent":["import React, {\n    ChangeEvent,\n    DetailedHTMLProps,\n    InputHTMLAttributes,\n    KeyboardEvent,\n    ReactNode,\n} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = Omit<DefaultInputPropsType, 'type'> & {\n    // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: ReactNode\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        onChange,\n        onChangeText,\n        onKeyPress,\n        onEnter,\n        error,\n        className,\n        spanClassName,\n        id,\n\n        ...restProps // все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange?.(e) // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText?.(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress?.(e)\n\n        onEnter && // если есть пропс onEnter\n        e.key === 'Enter' && // и если нажата кнопка Enter\n        onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = s.error\n        + (spanClassName ? ' ' + spanClassName : '')\n    const finalInputClassName = s.input\n        + (error ? ' ' + s.errorInput : ' ' + s.superInput)\n        + (className ? ' ' + s.className : '') // задача на смешивание классов\n\n    return (\n        <div className={s.inputWrapper}>\n            <input\n                id={id}\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            <span\n                id={id ? id + '-span' : undefined}\n                className={finalSpanClassName}\n            >\n                {error}\n            </span>\n        </div>\n    )\n}\n\nexport default SuperInputText\n"],"mappings":";AAAA,OAAOA,KAAP,MAMO,OANP;AAOA,OAAOC,CAAP,MAAc,6BAAd,C,CAEA;;;;AAcA,MAAMC,cAAiD,GAAG,QAarD;EAAA,IAZD;IACIC,QADJ;IAEIC,YAFJ;IAGIC,UAHJ;IAIIC,OAJJ;IAKIC,KALJ;IAMIC,SANJ;IAOIC,aAPJ;IAQIC,EARJ;IAUI,GAAGC,SAVP,CAUiB;;EAVjB,CAYC;;EACD,MAAMC,gBAAgB,GAAIC,CAAD,IAAsC;IAC3DV,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGU,CAAH,CAAR,CAD2D,CAC7C;;IAEdT,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGS,CAAC,CAACC,aAAF,CAAgBC,KAAnB,CAAZ;EACH,CAJD;;EAKA,MAAMC,kBAAkB,GAAIH,CAAD,IAAwC;IAC/DR,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGQ,CAAH,CAAV;IAEAP,OAAO,IAAI;IACXO,CAAC,CAACI,GAAF,KAAU,OADV,IACqB;IACrBX,OAAO,EAFP,CAH+D,CAKrD;EACb,CAND;;EAQA,MAAMY,kBAAkB,GAAGjB,CAAC,CAACM,KAAF,IACpBE,aAAa,GAAG,MAAMA,aAAT,GAAyB,EADlB,CAA3B;EAEA,MAAMU,mBAAmB,GAAGlB,CAAC,CAACmB,KAAF,IACrBb,KAAK,GAAG,MAAMN,CAAC,CAACoB,UAAX,GAAwB,MAAMpB,CAAC,CAACqB,UADhB,KAErBd,SAAS,GAAG,MAAMP,CAAC,CAACO,SAAX,GAAuB,EAFX,CAA5B,CAhBC,CAkB0C;;EAE3C,oBACI;IAAK,SAAS,EAAEP,CAAC,CAACsB,YAAlB;IAAA,wBACI;MACI,EAAE,EAAEb,EADR;MAEI,IAAI,EAAE,MAFV;MAGI,QAAQ,EAAEE,gBAHd;MAII,UAAU,EAAEI,kBAJhB;MAKI,SAAS,EAAEG,mBALf;MAAA,GAMQR;IANR;MAAA;MAAA;MAAA;IAAA,QADJ,eASI;MACI,EAAE,EAAED,EAAE,GAAGA,EAAE,GAAG,OAAR,GAAkBc,SAD5B;MAEI,SAAS,EAAEN,kBAFf;MAAA,UAIKX;IAJL;MAAA;MAAA;MAAA;IAAA,QATJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH,CAnDD;;KAAML,c;AAqDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}