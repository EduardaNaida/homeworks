{"ast":null,"code":"import _defineProperty from \"/Users/eduardanaida/Documents/GitHub/homeworks/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/eduardanaida/Documents/GitHub/homeworks/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n    defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$attribute = options.attribute,\n    defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n    _options$modeStorageK = options.modeStorageKey,\n    defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$defaultMode = options.defaultMode,\n    desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    designSystemColorScheme = options.defaultColorScheme,\n    _options$disableTrans = options.disableTransitionOnChange,\n    designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    _options$enableColorS = options.enableColorScheme,\n    designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n    designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n    resolveTheme = options.resolveTheme,\n    excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n      _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n      colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n      _ref$defaultMode = _ref.defaultMode,\n      defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n      _ref$defaultColorSche = _ref.defaultColorScheme,\n      defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n      _ref$disableTransitio = _ref.disableTransitionOnChange,\n      disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n      _ref$enableColorSchem = _ref.enableColorScheme,\n      enableColorScheme = _ref$enableColorSchem === void 0 ? designSystemEnableColorScheme : _ref$enableColorSchem,\n      _ref$storageWindow = _ref.storageWindow,\n      storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n      _ref$documentNode = _ref.documentNode,\n      documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n      _ref$colorSchemeNode = _ref.colorSchemeNode,\n      colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n      _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n      colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n      _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n      shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? designSystemShouldSkipGeneratingVar : _ref$shouldSkipGenera;\n    var hasMounted = React.useRef(false);\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n      colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n      _themeProp$components = themeProp.components,\n      components = _themeProp$components === void 0 ? {} : _themeProp$components,\n      cssVarPrefix = themeProp.cssVarPrefix,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        colorSchemeStorageKey: colorSchemeStorageKey,\n        defaultMode: defaultMode,\n        storageWindow: storageWindow\n      }),\n      mode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      colorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    }();\n    var theme = restThemeProp;\n    var _cssVarsParser = cssVarsParser(theme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n      rootCss = _cssVarsParser.css,\n      rootVars = _cssVarsParser.vars,\n      parsedTheme = _cssVarsParser.parsedTheme;\n    theme = _extends({}, parsedTheme, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    });\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        scheme = _ref3[1];\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n          prefix: cssVarPrefix,\n          shouldSkipGeneratingVar: shouldSkipGeneratingVar\n        }),\n        css = _cssVarsParser2.css,\n        vars = _cssVarsParser2.vars,\n        parsedScheme = _cssVarsParser2.parsedTheme;\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      }();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n      var priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n      return function () {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: _defineProperty({}, colorSchemeSelector, rootCss)\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      modeStorageKey: defaultModeStorageKey,\n      enableColorScheme: designSystemEnableColorScheme\n    }, params));\n  };\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","prefix","rootCss","css","rootVars","vars","parsedTheme","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["/Users/eduardanaida/Documents/GitHub/homeworks/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}